name: Plugin update

on:
  workflow_dispatch:
    inputs:
      repo_owner:
        type: string
        description: Username of the target repository's owner
        required: true
      repo_name:
        type: string
        description: Name of the target repository
        required: true
      repo_id:
        type: string
        description: Id of the target repository
        required: true

jobs:
  build:
    name: Build target repository
    runs-on: ubuntu-20.04
    timeout-minutes: 4
    steps:
      - name: Checkout target plugin repository
        uses: actions/checkout@v3
        with:
          repository: "${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}"

      - name: Setup Node 18
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Setup corepack
        run: |
          corepack enable

      # aliuhook
      # - name: Setup JDK 11
      #   uses: actions/setup-java@v2
      #   with:
      #     java-version: 11
      #     distribution: zulu

      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@7c5672355aaa8fde5f97a91aa9a99616d1ace6bc

      - name: Build Plugin
        id: build
        env:
          CI: "true"
        run: |
          # Read distFolder from .aliucord.json to step output
          echo "dist_folder=$(jq -r '.distFolder' < .aliucord.json)" >> $GITHUB_OUTPUT

          # Run the buildCommand from .aliucord.json
          jq -r '.buildCommand' < .aliucord.json | sh

      - name: Upload plugins
        uses: actions/upload-artifact@v3
        with:
          name: INSECURE-DO-NOT-USE
          # Upload manifests, plugin zips, and .aliucord.json
          path: ${{ steps.build.outputs.dist_folder }}/*.{zip,json} .aliucord.json

  make_pr:
    name: Make/Update PR
    runs-on: ubuntu-20.04
    timeout-minutes: 1
    steps:
      - name: Download plugins
        uses: actions/download-artifact@v3
        with:
          name: INSECURE-DO-NOT-USE
          path: build.zip

      - name: Extract plugins
        run: |
          unzip build.zip -d build
          cd build
          # Delete the ignoredPlugins as marked in .aliucord.json
          rm `jq -r '.ignoredPlugins | map("'\''\(.)'.zip\''") | join(" ")' < .aliucord.json`

      - name: Test for existing PR
        id: test_existing
        run: |
          # Target branch name is update/<repo id>, set as step output
          branch_name="update/${{ github.event.inputs.repo_id }}"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

          # Check if target branch already exists, set base branch to checkout
          if git ls-remote --exit-code https://github.com/Aliucord/plugins.git $branch_name"; then
            echo "base_branch=$branch_name" >> $GITHUB_OUTPUT
          else
            echo "base_branch=data"  >> $GITHUB_OUTPUT
          fi

      - name: Checkout plugin repo
        uses: actions/checkout@v3
        with:
          repository: Aliucord/plugins
          path: plugins
          ref: ${{ steps.test_existing.outputs.base_branch }}

      - name: Download target plugin repository
        uses: actions/checkout@v3
        with:
          repository: "${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}"
          path: plugins/repositories/${{ github.event.inputs.repo_id }}

      - name: Update plugins in repo
        run: |
          cd plugins/modern

          # Make new branch if not already on it
          if [ "${{ steps.test_existing.outputs.base_branch }}" == "data" ]; then
            git checkout -b ${{ steps.test_existing.outputs.branch_name }}
          fi

          # Get HEAD commit on target plugin repository
          src_commit=`cd plugins/repositories/${{ github.event.inputs.repo_id }} && git rev-parse HEAD`

          # Copy plugin stuff into plugin dir
          for pluginPath in $GITHUB_WORKSPACE/build/*.zip; do
            pluginName=`basename ${plugin::-4}`
            mkdir -p $pluginName

            # owner validation
            # if symlink exists, check if the last section of target path matches repo id
            if [ -f ./$pluginName/repository ] && [ "$(readlink -f ./$pluginName/repository | basename)" != "${{ github.event.inputs.repo_id }}" ]; then
              echo "Failed validation! This repository does not own the plugin $pluginName"
              exit 1
            fi

            # copy plugin .zip
            mv $pluginPath ./$pluginName

            # copy manifest.json
            mv -T `dirname $pluginPath`/$pluginName-manifest.json ./$pluginName/manifest.json

            # make metadata.json
            # get version & changelog from manifest, hash & commit supplied as arg
            hash=`echo -n $pluginPath | sha256sum`
            cat ./$pluginName/manifest.json | jq -c --arg hash $hash --arg commit $src_commit '{hash: $hash, changelog: .changelog, commit: $commit, version: .version}' > ./$pluginName/metadata.json

            # make repo symlink
            ln -s ../repositories/${{ github.event.inputs.repo_id }} ./$pluginName/repository
          done

          # make updater.json
          # This supplies the existing updater.json and all of the manifests, and overrides the existing with new
          cat updater.json **/manifest.json | jq -cs '.[0] + (.[1:] | reduce .[] as $manifest ({}; . + {($manifest.name): {version: $manifest.version}}))' > updater.json

          # make full.json
          # Supplies all manifests, combines into single array and checks for duplicates
          cat **/manifest.json | jq -cs 'if group_by(.name) | any(length>1) then "Duplicate manifest name key\n" | halt_error(1) else . end' > full.json

          # Remove .git from copied repo
          rm -rf plugins/repositories/${{ github.event.inputs.repo_id }}/.git

          # Commit
          cd $GITHUB_WORKSPACE/plugins
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add *
          git commit -m "build: commit ${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}@$src_commit" || exit 0
          git push -u origin ${{ steps.test_existing.outputs.branch_name }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        if: ${{ steps.test_existing.outputs.base_branch == "data" }}
        with:
          path: plugins
          base: data
          branch: ${{ steps.test_existing.outputs.branch_name }}
          title: "chore: update ${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}"
          body: "Author: @${{ github.event.inputs.repo_owner }}"
          delete-branch: true
          author: ${{ github.event.inputs.repo_owner }} <${{ github.event.inputs.repo_owner }}@users.noreply.github.com>
